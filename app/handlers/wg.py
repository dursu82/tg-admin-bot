import pyotp
import json
import iuliia
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from utils import is_valid_ipv4
from config import config
from scripts.wg import (
    wg_get_users, wg_get_user_ips, wg_get_user_config, wg_set_del, wg_set_add, wg_del_user, wg_add_user)


wg_router = Router()


class StateData(StatesGroup):
    waiting_for_2FA = State()
    waiting_for_yes_no = State()
    waiting_for_ip = State()
    waiting_for_name = State()


def cancel_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ])


def yes_no_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–ê", callback_data="yes"),
            InlineKeyboardButton(text="–ù–ï–¢", callback_data="no")
        ]
    ])


def verify_totp_code(user_code: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º TOTP –∫–æ–¥"""
    secret = config.TOTP_SECRET
    totp = pyotp.TOTP(secret)
    return totp.verify(user_code, valid_window=1)  # –¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 1 –∏–Ω—Ç–µ—Ä–≤–∞–ª (30 —Å–µ–∫)


async def request_2fa(callback: CallbackQuery, state: FSMContext,
                      action: str = None, user: str = None, ip: str = None):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç 2FA –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.update_data(action=action, user=user, ip=ip)
    await state.set_state(StateData.waiting_for_2FA)
    await callback.message.edit_text(
        f"üîê –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è 2FA –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.\n" +
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞:\n\n",
        reply_markup=cancel_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ 2FA –∫–æ–¥–∞
@wg_router.message(StateData.waiting_for_2FA)
async def process_2fa_code(message: Message, state: FSMContext):
    code = message.text.strip()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏
    data = await state.get_data()
    attempts = data.get("attempts", 2)
    attempts -= 1
    await state.update_data(attempts=attempts)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6 —Ü–∏—Ñ—Ä)
    if not code.isdigit() or len(code) != 6:
        if attempts:
            await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        else:
            await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
        return

    if verify_totp_code(code):
        action = data.get("action")
        user = data.get("user")
        ip = data.get("ip")
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "add":
            chainset = data.get("chainset")
            await add_user(message, user, chainset)
        elif action == "del":
            await del_user(message, user)
        elif action == "set_add":
            await set_add(message, user, ip)
        elif action == "set_del":
            await set_del(message, user, ip)
        elif action == "config_show":
            await config_show(message, user)
        elif action == "config_update":
            await config_show(message, user, update=True)
        await state.clear()
    else:
        if attempts:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        else:
            await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ IP
@wg_router.message(StateData.waiting_for_ip)
async def process_ip(message: Message, state: FSMContext):
    ip = message.text.strip()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏
    data = await state.get_data()
    attempts = data.get("attempts", 2)
    attempts -= 1
    await state.update_data(attempts=attempts)
    if not is_valid_ipv4(ip):
        if attempts:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        else:
            await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ip
    user = data.get("user")
    result = await wg_get_user_ips(name=user)
    try:
        wg_user_ips = json.loads(result.output)
        if wg_user_ips and ip in wg_user_ips:
            await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user}</code> —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ <code>{ip}</code>.")
            await state.clear()
        else:
            await state.update_data(ip=ip)
            await state.set_state(StateData.waiting_for_yes_no)
            await message.answer(
                f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ <code>{ip}</code> –¥–ª—è <code>{user}</code>:",
                reply_markup=yes_no_keyboard()
            )
    except Exception as e:
        if result.error:
            await message.answer(f"‚ùå {result.error}")
        else:
            await message.answer(f"‚ùå {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@wg_router.message(StateData.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏
    data = await state.get_data()
    attempts = data.get("attempts", 2)
    attempts -= 1
    await state.update_data(attempts=attempts)
    if not len(name.split()) == 2:
        if attempts:
            await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ <b>—Ä–æ–≤–Ω–æ –¥–≤–∞ —Å–ª–æ–≤–∞</b> ‚Äî –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é,\n–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–û–ª–µ–≥ –ò–≤–∞–Ω–æ–≤</code>")
        else:
            await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
    name = iuliia.TELEGRAM.translate(name)
    result = await wg_get_users()
    try:
        wg_users = json.loads(result.output)
        if wg_users and name in [item['name'] for item in wg_users]:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{name}</code> —É–∂–µ –µ—Å—Ç—å.")
            await state.clear()
        else:
            chainset = name.split()[0][0].lower() + name.split()[1].lower()
            await state.update_data(action="add",user=name,chainset=chainset)
            await state.set_state(StateData.waiting_for_yes_no)
            await message.answer(
                f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{name}, {chainset}</code>:",
                reply_markup=yes_no_keyboard()
            )
    except Exception as e:
        if result.error:
            await message.answer(f"‚ùå {result.error}")
        else:
            await message.answer(f"‚ùå {e}")


# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def add_user(message, user, chainset):
    result = await wg_add_user(name=user,chainset=chainset)
    try:
        config_data = json.loads(result.output)
        await message.answer(
            f"üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n<b>{user}</b>:\n\n" +
            f"<code># {config_data['Peer']}\n" +
            f"[Interface]\n" +
            f"PrivateKey = {config_data['PrivateKey']}\n" +
            f"Address = {config_data['ip']}/32\n\n" +
            f"[Peer]\n" +
            f"PublicKey = {config.WG_PublicKey}\n" +
            f"PresharedKey = {config_data['PresharedKey']}\n" +
            f"AllowedIPs = 192.168.10.0/21\n" +
            f"Endpoint = 21.22.23.24:51820\n" +
            f"PersistentKeepalive = 16</code>"
        )
    except Exception as e:
        if result.error:
            await message.answer(f"‚ùå {result.error}")
        else:
            await message.answer(f"‚ùå {e}")


async def del_user(message, user):
    result = await wg_del_user(name=user)
    try:
        data = json.loads(result.output)
        if data["success"]:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user}</code> —É–¥–∞–ª–µ–Ω.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞.")
    except Exception as e:
        if result.error:
            await message.answer(f"‚ùå {result.error}")
        else:
            await message.answer(f"‚ùå {e}")


async def config_show(message: Message, user: str, update: bool = False):
    result = await wg_get_user_config(name=user, update=update)
    try:
        config_data = json.loads(result.output)
        await message.answer(
            f"üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n<b>{user}</b>:\n\n" +
            f"<code># {config_data['Peer']}\n" +
            f"[Interface]\n" +
            f"PrivateKey = {config_data['PrivateKey']}\n" +
            f"Address = {config_data['ip']}/32\n\n" +
            f"[Peer]\n" +
            f"PublicKey = {config.WG_PublicKey}\n" +
            f"PresharedKey = {config_data['PresharedKey']}\n" +
            f"AllowedIPs = 192.168.10.0/21\n" +
            f"Endpoint = 21.22.23.24:51820\n" +
            f"PersistentKeepalive = 16</code>"
        )
    except Exception as e:
        if result.error:
            await message.answer(f"‚ùå {result.error}")
        else:
            await message.answer(f"‚ùå {e}")


async def set_add(message, user, ip):
    result = await wg_set_add(name=user, ip=ip)
    try:
        data = json.loads(result.output)
        if data["success"]:
            await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ <code>{ip}</code> –¥–ª—è <code>{user}</code> –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞.")
    except Exception as e:
        if result.error:
            await message.answer(f"‚ùå {result.error}")
        else:
            await message.answer(f"‚ùå {e}")


async def set_del(message, user, ip):
    result = await wg_set_del(name=user, ip=ip)
    try:
        data = json.loads(result.output)
        if data["success"]:
            await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ <code>{ip}</code> –¥–ª—è <code>{user}</code> —É–¥–∞–ª—ë–Ω.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞.")
    except Exception as e:
        if result.error:
            await message.answer(f"‚ùå {result.error}")
        else:
            await message.answer(f"‚ùå {e}")


@wg_router.message(Command("wg"))
async def cmd_proxy(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –°–ø–∏—Å–æ–∫", callback_data="list")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="del")],
        [InlineKeyboardButton(text="üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callback_data="config")],
        [InlineKeyboardButton(text="üîß –î–æ—Å—Ç—É–ø—ã", callback_data="set")]
    ])
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@wg_router.callback_query(F.data.in_({"add", "list", "config", "set"}))
async def process_simple_callbacks(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    if data == "add":
        await state.set_state(StateData.waiting_for_name)
        await callback.message.edit_text(
            text="–£–∫–∞–∂–∏—Ç–µ <code>–ò–º—è –§–∞–º–∏–ª–∏—è</code> –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=cancel_keyboard()
        )
    elif data == "list":
        result = await wg_get_users()
        try:
            wg_users = json.loads(result.output)
            await callback.message.edit_text(
                f"<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>:\n\n" +
                "\n".join(f"‚Äî <code>{item['name']}</code> {item['ip']}" for item in wg_users)
            )
        except Exception as e:
            if result.error:
                await callback.message.answer(f"‚ùå {result.error}")
            else:
                await callback.message.answer(f"‚ùå {e}")
    elif data == "config":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å", callback_data="config_show")],
            [InlineKeyboardButton(text="üîÅ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="config_update")]
        ])
        await callback.message.edit_text(text="üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:", reply_markup=keyboard)
    elif data == "set":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–æ–≤", callback_data="set_list")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="set_add")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="set_del")]
        ])
        await callback.message.edit_text(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞–º–∏:", reply_markup=keyboard)
    await callback.answer()


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def show_users(callback: CallbackQuery):
    action = callback.data
    action_text = {
        "del": "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        "set_list": "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø—ã:",
        "set_add": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø:",
        "set_del": "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø:",
        "config_show": "üîç –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:",
        "config_update": "üîÅ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:"
    }
    result = await wg_get_users()
    try:
        wg_users = json.loads(result.output)
        buttons = [
            InlineKeyboardButton(text=item["name"], callback_data=f"user|{item['name']}|{action}")
            for item in wg_users
        ]
        inline_keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
        keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
        await callback.message.edit_text(
            f"{action_text.get(action, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')}\n\n",
            reply_markup=keyboard
        )
    except Exception as e:
        if result.error:
            await callback.message.answer(f"‚ùå {result.error}")
        else:
            await callback.message.answer(f"‚ùå {e}")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@wg_router.callback_query(F.data.startswith("user"))
async def process_callback_user(callback: CallbackQuery, state: FSMContext):
    _, user, action = callback.data.split("|")

    if action == "del":
        await state.update_data(action="del", user=user)
        await state.set_state(StateData.waiting_for_yes_no)
        await callback.message.edit_text(
            f"‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user}</code>:",
            reply_markup=yes_no_keyboard()
        )
        await callback.answer()

    elif action in {"config_show", "config_update"}:
        await request_2fa(callback, state, action=action, user=user)

    elif action == "set_list":
        result = await wg_get_user_ips(name=user)
        try:
            wg_user_ips = json.loads(result.output)
            if wg_user_ips:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä—ã –¥–ª—è –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫
                # if len(wg_user_ips) > 10:
                #
                #     mid = (len(wg_user_ips) + 1) // 2
                #     left = wg_user_ips[:mid]
                #     right = wg_user_ips[mid:]
                #
                #     # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –≤ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                #     max_left_length = max(len(ip) for ip in left)
                #
                #     lines = []
                #     for i in range(len(left)):
                #         if i < len(right):
                #             # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
                #             left_formatted = f"{left[i]:<{max_left_length}}"
                #             right_formatted = f"{right[i]}"
                #             lines.append(f"‚Äî <code>{left_formatted}</code>    ‚Äî <code>{right_formatted}</code>")
                #         else:
                #             lines.append(f"‚Äî <code>{left[i]}</code>")
                #
                #     ip_text = "\n".join(lines)
                # else:
                #     ip_text = "\n".join(f"‚Äî <code>{ip}</code>" for ip in wg_user_ips)
                #
                # await callback.message.edit_text(f"üîç –î–æ—Å—Ç—É–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n<b>{user}</b>:\n\n{ip_text}")
                await callback.message.edit_text(
                    f"üîç –î–æ—Å—Ç—É–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n<b>{user}</b>:\n\n" +
                    "\n".join(f"‚Äî <code>{ip}</code>" for ip in wg_user_ips)
                )
            else:
                await callback.message.edit_text(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user}</code> –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–æ–≤.")
            await state.clear()
        except Exception as e:
            if result.error:
                await callback.message.answer(f"‚ùå {result.error}")
            else:
                await callback.message.answer(f"‚ùå {e}")

    elif action == "set_add":
        await state.update_data(action=action, user=user)
        await state.set_state(StateData.waiting_for_ip)
        await callback.message.edit_text(
            text="–£–∫–∞–∂–∏—Ç–µ IP –∞–¥—Ä–µ—Å:",
            reply_markup=cancel_keyboard()
        )

    elif action == "set_del":
        result = await wg_get_user_ips(name=user)
        try:
            wg_user_ips = json.loads(result.output)
            if wg_user_ips:
                buttons = [
                    InlineKeyboardButton(text=ip, callback_data=f"set_del|{user}|{ip}")
                    for ip in wg_user_ips
                ]
                inline_keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
                keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
                await callback.message.edit_text("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫:\n\n",reply_markup=keyboard)
            else:
                await callback.message.edit_text(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user}</code> –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–æ–≤.")
            await callback.answer()
        except Exception as e:
            if result.error:
                await callback.message.answer(f"‚ùå {result.error}")
            else:
                await callback.message.answer(f"‚ùå {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–î–æ—Å—Ç—É–ø", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
@wg_router.callback_query(F.data.in_({"del", "set_list", "set_add", "set_del", "config_show", "config_update"}))
async def process_callback_access(callback: CallbackQuery):
    await show_users(callback)


@wg_router.callback_query(F.data.startswith("set_del|"))
async def process_callback_set_del(callback: CallbackQuery, state: FSMContext):
    _, user, ip = callback.data.split("|")
    if user and ip:
        await state.update_data(action="set_del", user=user, ip=ip)
        await state.set_state(StateData.waiting_for_yes_no)
        await callback.message.edit_text(
            f"‚ùå –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ <code>{ip}</code> –¥–ª—è <code>{user}</code>:",
            reply_markup=yes_no_keyboard()
        )
    else:
        await callback.message.edit_text(text=f"‚ùå –û—à–∏–±–∫–∞.")
        await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –î–ê/–ù–ï–¢
@wg_router.callback_query(StateData.waiting_for_yes_no, F.data.in_(["yes", "no"]))
async def process_confirmation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    action = data.get("action")
    user = data.get("user")
    ip = data.get("ip")
    if callback.data == "yes":
        await request_2fa(callback, state, action=action, user=user, ip=ip)
    else:
        await callback.message.edit_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@wg_router.callback_query(F.data == "cancel")
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text="üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
